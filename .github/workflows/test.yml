name: Tests

on:
  push:
    branches:
      - '**'
    paths-ignore:
      - 'docs/**'
      - '**.md'
      - '.vscode/**'
  pull_request:
    branches: [ main ]
  repository_dispatch:
    types: [run-tests]
  workflow_dispatch:

jobs:
  tests:
    name: ${{ matrix.suite.name }} - Unity ${{ matrix.unityVersion }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        unityVersion:
          - 2021.1.16f1
          - 2020.3.9f1
          - 2019.4.29f1
        targetPlatform:
          - StandaloneWindows64
        suite:
          - { name: "Unit Tests", assemblies: "ReactUnity.Tests;ReactUnity.Editor.Tests", coverage: false }
        include:
          - unityVersion: 2021.2.6f1
            suite: { name: "Unit Tests", assemblies: "ReactUnity.Tests;ReactUnity.Editor.Tests", coverage: true, main: true }
            targetPlatform: StandaloneWindows64
          # - unityVersion: 2021.2.6f1
          #   suite: { name: "Performance Tests", assemblies: "Unity.PerformanceTesting.Tests.Runtime;Unity.PerformanceTesting.Tests.Editor", coverage: false }
          #   targetPlatform: StandaloneWindows64
    steps:
      - name: Checkout core library
        uses: actions/checkout@v2
        with:
          path: core

      - name: Checkout test project
        uses: actions/checkout@v2
        with:
          ref: tests
          path: tests

      - name: Cache Unity Library
        uses: actions/cache@v2
        with:
          path: tests/Library
          key: Library-${{ matrix.targetPlatform }}-${{ matrix.unityVersion }}
          restore-keys: |
            Library-

      - name: Clear React Unity package lock
        run: echo $(cat tests/Packages/packages-lock.json | jq 'del(.dependencies["com.reactunity.core"])') > tests/Packages/packages-lock.json

      - name: Install local React Unity package
        run: echo $(cat tests/Packages/manifest.json | jq '.dependencies["com.reactunity.core"]="file:../../core"') > tests/Packages/manifest.json

      - name: Install TMP v2
        if: startsWith(matrix.unityVersion, '2019')
        run: echo $(cat tests/Packages/manifest.json | jq '.dependencies["com.unity.textmeshpro"]="2.1.6"') > tests/Packages/manifest.json

      - name: Run Unity Tests
        uses: game-ci/unity-test-runner@v2
        id: testRunner
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          unityVersion: ${{ matrix.unityVersion }}
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          customParameters: ${{ matrix.suite.coverage && '-enableCodeCoverage -debugCodeOptimization -coverageOptions assemblyFilters:+ReactUnity,+ReactUnity.*' || '' }} -assemblyNames ${{ matrix.suite.assemblies }}
          checkName: ${{ matrix.suite.name }} ${{ matrix.unityVersion }}
          projectPath: tests

      - name: Commit Snapshots
        if: hashFiles('core/Tests/.snapshots/snapshots.lock') != '' && matrix.suite.main
        uses: EndBug/add-and-commit@v7
        with:
          add: 'Tests/.snapshots'
          cwd: './core'
          default_author: github_actions
          message: 'Update snapshots'
          pull: 'NO-PULL'

      - name: Upload Test Result Artifacts
        uses: actions/upload-artifact@v2
        if: always() && matrix.suite.main
        with:
          name: ${{ matrix.suite.name }} ${{ matrix.unityVersion }}
          path: ${{ steps.testRunner.outputs.artifactsPath }}

      - name: Upload Code Coverage Artifacts
        uses: actions/upload-artifact@v2
        if: always() && matrix.suite.coverage && matrix.suite.main
        with:
          name: ${{ matrix.suite.name }} coverage
          path: tests/CodeCoverage

      - name: Upload Coverage to codecov
        if: always() && matrix.suite.coverage && matrix.suite.main
        uses: codecov/codecov-action@v2
        with:
          working-directory: ./core
          files: ../tests/CodeCoverage/tests-opencov/PlayMode/TestCoverageResults_0000.xml,../tests/CodeCoverage/tests-opencov/EditMode/TestCoverageResults_0000.xml
          flags: unittests
